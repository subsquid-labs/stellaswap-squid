type Block @entity {
    id: ID!
    number: Int! @index
    timestamp: DateTime! @index
}

type Transaction @entity {
    id: ID!
    hash: String! @index
    blockNumber: Int! @index
    timestamp: DateTime! @index
    contract: String!
}

interface Event @query {
    id: ID!
    blockNumber: Int!
    timestamp: DateTime!
    contract: String!
    name: String!
}

interface Function @query {
    id: ID!
    blockNumber: Int!
    transactionHash: String!
    timestamp: DateTime!
    contract: String!
    name: String!
}

type FactoryEventPairCreated implements Event @entity @index(fields: ["token0", "token1"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token0: String!
    token1: String!
    pair: String!
    arg3: BigInt!
}

type FactoryFunctionCreatePair implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
}

type FactoryFunctionPairCodeHash implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FactoryFunctionSetDevFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pair: String
    devFee: Int
}

type FactoryFunctionSetFeeTo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    feeTo: String
}

type FactoryFunctionSetFeeToSetter implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    feeToSetter: String
}

type FactoryFunctionSetMigrator implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    migrator: String
}

type FactoryFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pair: String
    swapFee: Int
}

type RouterFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
    amountADesired: BigInt
    amountBDesired: BigInt
    amountAMin: BigInt
    amountBMin: BigInt
    to: String
    deadline: BigInt
}

type RouterFunctionAddLiquidityEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amountTokenDesired: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
}

type RouterFunctionGetAmountIn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    reserveIn: BigInt
    reserveOut: BigInt
}

type RouterFunctionGetAmountOut implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    reserveIn: BigInt
    reserveOut: BigInt
}

type RouterFunctionQuote implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountA: BigInt
    reserveA: BigInt
    reserveB: BigInt
}

type RouterFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
    liquidity: BigInt
    amountAMin: BigInt
    amountBMin: BigInt
    to: String
    deadline: BigInt
}

type RouterFunctionRemoveLiquidityEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
}

type RouterFunctionRemoveLiquidityEthSupportingFeeOnTransfe implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
}

type RouterFunctionRemoveLiquidityEthWithPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
    approveMax: Boolean
    v: Int
    r: String
    s: String
}

type RouterFunctionRemoveLiquidityEthWithPermitSupportingFe implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
    approveMax: Boolean
    v: Int
    r: String
    s: String
}

type RouterFunctionRemoveLiquidityWithPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
    liquidity: BigInt
    amountAMin: BigInt
    amountBMin: BigInt
    to: String
    deadline: BigInt
    approveMax: Boolean
    v: Int
    r: String
    s: String
}

type RouterFunctionSwapEthForExactTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapExactEthForTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapExactEthForTokensSupportingFeeOnTr implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapExactTokensForEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapExactTokensForEthSupportingFeeOnTr implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapExactTokensForTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapExactTokensForTokensSupportingFeeOn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapTokensForExactEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    amountInMax: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterFunctionSwapTokensForExactTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    amountInMax: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
    amountADesired: BigInt
    amountBDesired: BigInt
    amountAMin: BigInt
    amountBMin: BigInt
    to: String
    deadline: BigInt
}

type RouterV21FunctionAddLiquidityEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amountTokenDesired: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
}

type RouterV21FunctionGetAmountIn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    reserveIn: BigInt
    reserveOut: BigInt
}

type RouterV21FunctionGetAmountOut implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    reserveIn: BigInt
    reserveOut: BigInt
}

type RouterV21FunctionQuote implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountA: BigInt
    reserveA: BigInt
    reserveB: BigInt
}

type RouterV21FunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
    liquidity: BigInt
    amountAMin: BigInt
    amountBMin: BigInt
    to: String
    deadline: BigInt
}

type RouterV21FunctionRemoveLiquidityEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
}

type RouterV21FunctionRemoveLiquidityEthSupportingFeeOnTra implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
}

type RouterV21FunctionRemoveLiquidityEthWithPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
    approveMax: Boolean
    v: Int
    r: String
    s: String
}

type RouterV21FunctionRemoveLiquidityEthWithPermitSupportin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    liquidity: BigInt
    amountTokenMin: BigInt
    amountEthMin: BigInt
    to: String
    deadline: BigInt
    approveMax: Boolean
    v: Int
    r: String
    s: String
}

type RouterV21FunctionRemoveLiquidityWithPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenA: String
    tokenB: String
    liquidity: BigInt
    amountAMin: BigInt
    amountBMin: BigInt
    to: String
    deadline: BigInt
    approveMax: Boolean
    v: Int
    r: String
    s: String
}

type RouterV21FunctionSwapEthForExactTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapExactEthForTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapExactEthForTokensSupportingFeeO implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapExactTokensForEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapExactTokensForEthSupportingFeeO implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapExactTokensForTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapExactTokensForTokensSupportingFe implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountIn: BigInt
    amountOutMin: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapTokensForExactEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    amountInMax: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type RouterV21FunctionSwapTokensForExactTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountOut: BigInt
    amountInMax: BigInt
    path: JSON
    to: String
    deadline: BigInt
}

type SwapForGasEventMetaTransactionExecuted implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    userAddress: String!
    relayerAddress: String!
    functionSignature: String!
}

type SwapForGasEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type SwapForGasFunctionChangeFeeAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFeeAddress: String
}

type SwapForGasFunctionChangeFeePercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFeePercent: BigInt
}

type SwapForGasFunctionChangeRouter implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTarget: String
}

type SwapForGasFunctionExecuteMetaTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    userAddress: String
    functionSignature: String
    sigR: String
    sigS: String
    sigV: Int
}

type SwapForGasFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SwapForGasFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    swapCallData: String
}

type SwapForGasFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type SwapForGasFunctionWhitelistToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAddress: String
    whitelisted: Boolean
}

type SwapForGasFunctionWithdrawEth implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
}

type SwapForGasFunctionWithdrawToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type FarmsV1EventAllocPointsUpdated implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
    previousAmount: BigInt!
    newAmount: BigInt!
}

type FarmsV1EventDeposit implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type FarmsV1EventEmergencyWithdraw implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type FarmsV1EventEmissionRateUpdated implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
    previousAmount: BigInt!
    newAmount: BigInt!
}

type FarmsV1EventMetaTxnsDisabled implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
}

type FarmsV1EventMetaTxnsEnabled implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
}

type FarmsV1EventOperatorTransferred implements Event @entity @index(fields: ["previousOperator", "newOperator"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOperator: String!
    newOperator: String!
}

type FarmsV1EventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type FarmsV1EventRewardLockedUp implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amountLockedUp: BigInt!
}

type FarmsV1EventSetInvestorAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type FarmsV1EventSetInvestorPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type FarmsV1EventSetTeamAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type FarmsV1EventSetTeamPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type FarmsV1EventSetTreasuryAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type FarmsV1EventSetTreasuryPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type FarmsV1EventWithdraw implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type FarmsV1FunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    allocPoint: BigInt
    lpToken: String
    depositFeeBp: Int
    harvestInterval: BigInt
    withUpdate: Boolean
}

type FarmsV1FunctionDeposit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
}

type FarmsV1FunctionDisableMetaTxns implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV1FunctionEmergencyWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type FarmsV1FunctionEnableMetaTxns implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV1FunctionGetMultiplier implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
}

type FarmsV1FunctionHarvestMany implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pids: JSON
}

type FarmsV1FunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV1FunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV1FunctionSet implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    depositFeeBp: Int
    harvestInterval: BigInt
    withUpdate: Boolean
}

type FarmsV1FunctionSetInvestorAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    investorAddress: String
}

type FarmsV1FunctionSetInvestorPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newInvestorPercent: BigInt
}

type FarmsV1FunctionSetTeamAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    teamAddress: String
}

type FarmsV1FunctionSetTeamPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTeamPercent: BigInt
}

type FarmsV1FunctionSetTreasuryAddr implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    treasuryAddress: String
}

type FarmsV1FunctionSetTreasuryPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTreasuryPercent: BigInt
}

type FarmsV1FunctionStartFarming implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV1FunctionTransferOperator implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOperator: String
}

type FarmsV1FunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type FarmsV1FunctionUpdateAllocPoint implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    withUpdate: Boolean
}

type FarmsV1FunctionUpdateEmissionRate implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaPerBlock: BigInt
}

type FarmsV1FunctionUpdatePool implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type FarmsV1FunctionWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
}

type FarmsV2DualEventAdd implements Event @entity @index(fields: ["pid", "lpToken", "rewarders"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
    lpToken: String!
    depositFeeBp: Int!
    harvestInterval: BigInt!
    rewarders: JSON!
}

type FarmsV2DualEventAllocPointsUpdated implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
    previousAmount: BigInt!
    newAmount: BigInt!
}

type FarmsV2DualEventDeposit implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type FarmsV2DualEventEmergencyWithdraw implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type FarmsV2DualEventEmissionRateUpdated implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
    previousValue: BigInt!
    newValue: BigInt!
}

type FarmsV2DualEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type FarmsV2DualEventRewardLockedUp implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amountLockedUp: BigInt!
}

type FarmsV2DualEventSet implements Event @entity @index(fields: ["pid", "rewarders"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
    depositFeeBp: Int!
    harvestInterval: BigInt!
    rewarders: JSON!
}

type FarmsV2DualEventSetInvestorAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type FarmsV2DualEventSetInvestorPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type FarmsV2DualEventSetTeamAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type FarmsV2DualEventSetTeamPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type FarmsV2DualEventSetTreasuryAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type FarmsV2DualEventSetTreasuryPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type FarmsV2DualEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accStellaPerShare: BigInt!
}

type FarmsV2DualEventWithdraw implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type FarmsV2DualFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    allocPoint: BigInt
    lpToken: String
    depositFeeBp: Int
    harvestInterval: BigInt
    rewarders: JSON
}

type FarmsV2DualFunctionDeposit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
}

type FarmsV2DualFunctionDepositWithPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type FarmsV2DualFunctionEmergencyWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type FarmsV2DualFunctionHarvestMany implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pids: JSON
}

type FarmsV2DualFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV2DualFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV2DualFunctionSet implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    depositFeeBp: Int
    harvestInterval: BigInt
    rewarders: JSON
}

type FarmsV2DualFunctionSetInvestorAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    investorAddress: String
}

type FarmsV2DualFunctionSetInvestorPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newInvestorPercent: BigInt
}

type FarmsV2DualFunctionSetTeamAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    teamAddress: String
}

type FarmsV2DualFunctionSetTeamPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTeamPercent: BigInt
}

type FarmsV2DualFunctionSetTreasuryAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    treasuryAddress: String
}

type FarmsV2DualFunctionSetTreasuryPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTreasuryPercent: BigInt
}

type FarmsV2DualFunctionStartFarming implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FarmsV2DualFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type FarmsV2DualFunctionUpdateAllocPoint implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
}

type FarmsV2DualFunctionUpdateEmissionRate implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaPerSec: BigInt
}

type FarmsV2DualFunctionUpdatePool implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type FarmsV2DualFunctionWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
}

type VaultsEventAllocPointsUpdated implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
    previousAmount: BigInt!
    newAmount: BigInt!
}

type VaultsEventDeposit implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type VaultsEventEmergencyWithdraw implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type VaultsEventEmissionRateUpdated implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
    previousAmount: BigInt!
    newAmount: BigInt!
}

type VaultsEventMetaTxnsDisabled implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
}

type VaultsEventMetaTxnsEnabled implements Event @entity @index(fields: ["caller"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    caller: String!
}

type VaultsEventOperatorTransferred implements Event @entity @index(fields: ["previousOperator", "newOperator"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOperator: String!
    newOperator: String!
}

type VaultsEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type VaultsEventRewardLockedUp implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amountLockedUp: BigInt!
}

type VaultsEventSetInvestorAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type VaultsEventSetInvestorPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type VaultsEventSetTeamAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type VaultsEventSetTeamPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type VaultsEventSetTreasuryAddress implements Event @entity @index(fields: ["oldAddress", "newAddress"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldAddress: String!
    newAddress: String!
}

type VaultsEventSetTreasuryPercent implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldPercent: BigInt!
    newPercent: BigInt!
}

type VaultsEventWithdraw implements Event @entity @index(fields: ["user", "pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    pid: BigInt!
    amount: BigInt!
}

type VaultsFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    allocPoint: BigInt
    lpToken: String
    depositFeeBp: Int
    harvestInterval: BigInt
    withUpdate: Boolean
    lockDownDuration: BigInt
}

type VaultsFunctionDeposit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
}

type VaultsFunctionDisableMetaTxns implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type VaultsFunctionEmergencyWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type VaultsFunctionEnableMetaTxns implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type VaultsFunctionGetMultiplier implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
}

type VaultsFunctionHarvestMany implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pids: JSON
}

type VaultsFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type VaultsFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type VaultsFunctionSet implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    depositFeeBp: Int
    harvestInterval: BigInt
    lockDownDuration: BigInt
    withUpdate: Boolean
}

type VaultsFunctionSetInvestorAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    investorAddress: String
}

type VaultsFunctionSetInvestorPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newInvestorPercent: BigInt
}

type VaultsFunctionSetTeamAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    teamAddress: String
}

type VaultsFunctionSetTeamPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTeamPercent: BigInt
}

type VaultsFunctionSetTreasuryAddr implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    treasuryAddress: String
}

type VaultsFunctionSetTreasuryPercent implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newTreasuryPercent: BigInt
}

type VaultsFunctionStartFarming implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type VaultsFunctionTransferOperator implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOperator: String
}

type VaultsFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type VaultsFunctionUpdateAllocPoint implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    withUpdate: Boolean
}

type VaultsFunctionUpdateEmissionRate implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaPerBlock: BigInt
}

type VaultsFunctionUpdatePool implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type VaultsFunctionWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
}

type XStellaEventApproval implements Event @entity @index(fields: ["owner", "spender"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    spender: String!
    value: BigInt!
}

type XStellaEventTransfer implements Event @entity @index(fields: ["from", "to"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String!
    to: String!
    value: BigInt!
}

type XStellaFunctionApprove implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    amount: BigInt
}

type XStellaFunctionDecreaseAllowance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    subtractedValue: BigInt
}

type XStellaFunctionEnter implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaAmount: BigInt
}

type XStellaFunctionIncreaseAllowance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    addedValue: BigInt
}

type XStellaFunctionLeave implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    xStellaAmount: BigInt
}

type XStellaFunctionTransfer implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    recipient: String
    amount: BigInt
}

type XStellaFunctionTransferFrom implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    sender: String
    recipient: String
    amount: BigInt
}

type LockerEventLock implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String!
    amount: BigInt!
    id0: BigInt!
}

type LockerEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type LockerEventWithdraw implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    withdrawer: String!
    amount: BigInt!
}

type LockerFunctionLockTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    withdrawer: String
    amount: BigInt
    unlockTimestamp: BigInt
}

type LockerFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type LockerFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type LockerFunctionWithdrawTokens implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    id0: BigInt
}

type AvaxIloEventClaimed implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AvaxIloEventDeposit implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AvaxIloEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AvaxIloEventRefunded implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AvaxIloFunctionClaim implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AvaxIloFunctionCommit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
}

type AvaxIloFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AvaxIloFunctionRefund implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AvaxIloFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AvaxIloFunctionSetEndTime implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    endTime: BigInt
}

type AvaxIloFunctionSetRaisingAmount implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    raisingAmount: BigInt
}

type AvaxIloFunctionSetStartTime implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    startTime: BigInt
}

type AvaxIloFunctionSetStellaPerAvax implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaPerAvax: BigInt
}

type AvaxIloFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type MaticIloEventClaimed implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type MaticIloEventDeposit implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type MaticIloEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type MaticIloEventRefunded implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type MaticIloFunctionClaim implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MaticIloFunctionCommit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
}

type MaticIloFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type MaticIloFunctionMoveRaisedBase implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    to: String
}

type MaticIloFunctionRefund implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MaticIloFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MaticIloFunctionSetEndTime implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    endTime: BigInt
}

type MaticIloFunctionSetRaisingAmount implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    raisingAmount: BigInt
}

type MaticIloFunctionSetStartTime implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    startTime: BigInt
}

type MaticIloFunctionSetStellaPerBase implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaPerBase: BigInt
}

type MaticIloFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type FtmIloEventClaimed implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type FtmIloEventDeposit implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type FtmIloEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type FtmIloEventRefunded implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type FtmIloFunctionClaim implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FtmIloFunctionCommit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
}

type FtmIloFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type FtmIloFunctionMoveRaisedBase implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    to: String
}

type FtmIloFunctionRefund implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FtmIloFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type FtmIloFunctionSetEndTime implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    endTime: BigInt
}

type FtmIloFunctionSetRaisingAmount implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    raisingAmount: BigInt
}

type FtmIloFunctionSetStartTime implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    startTime: BigInt
}

type FtmIloFunctionSetStellaPerBase implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stellaPerBase: BigInt
}

type FtmIloFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type StellaTimelockEventCancelTransaction implements Event @entity @index(fields: ["txHash", "target"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    txHash: String!
    target: String!
    value: BigInt!
    signature: String!
    data: String!
    eta: BigInt!
}

type StellaTimelockEventExecuteTransaction implements Event @entity @index(fields: ["txHash", "target"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    txHash: String!
    target: String!
    value: BigInt!
    signature: String!
    data: String!
    eta: BigInt!
}

type StellaTimelockEventNewAdmin implements Event @entity @index(fields: ["newAdmin"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdmin: String!
}

type StellaTimelockEventNewDelay implements Event @entity @index(fields: ["newDelay"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newDelay: BigInt!
}

type StellaTimelockEventNewPendingAdmin implements Event @entity @index(fields: ["newPendingAdmin"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newPendingAdmin: String!
}

type StellaTimelockEventQueueTransaction implements Event @entity @index(fields: ["txHash", "target"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    txHash: String!
    target: String!
    value: BigInt!
    signature: String!
    data: String!
    eta: BigInt!
}

type StellaTimelockFunctionAcceptAdmin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type StellaTimelockFunctionCancelTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    target: String
    value: BigInt
    signature: String
    data: String
    eta: BigInt
}

type StellaTimelockFunctionExecuteTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    target: String
    value: BigInt
    signature: String
    data: String
    eta: BigInt
}

type StellaTimelockFunctionQueueTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    target: String
    value: BigInt
    signature: String
    data: String
    eta: BigInt
}

type StellaTimelockFunctionSetDelay implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    delay: BigInt
}

type StellaTimelockFunctionSetPendingAdmin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pendingAdmin: String
}

type TimelockMainEventCancelTransaction implements Event @entity @index(fields: ["txHash", "target"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    txHash: String!
    target: String!
    value: BigInt!
    signature: String!
    data: String!
    eta: BigInt!
}

type TimelockMainEventExecuteTransaction implements Event @entity @index(fields: ["txHash", "target"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    txHash: String!
    target: String!
    value: BigInt!
    signature: String!
    data: String!
    eta: BigInt!
}

type TimelockMainEventNewAdmin implements Event @entity @index(fields: ["newAdmin"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdmin: String!
}

type TimelockMainEventNewDelay implements Event @entity @index(fields: ["newDelay"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newDelay: BigInt!
}

type TimelockMainEventNewPendingAdmin implements Event @entity @index(fields: ["newPendingAdmin"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newPendingAdmin: String!
}

type TimelockMainEventQueueTransaction implements Event @entity @index(fields: ["txHash", "target"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    txHash: String!
    target: String!
    value: BigInt!
    signature: String!
    data: String!
    eta: BigInt!
}

type TimelockMainFunctionAcceptAdmin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type TimelockMainFunctionCancelTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    target: String
    value: BigInt
    signature: String
    data: String
    eta: BigInt
}

type TimelockMainFunctionExecuteTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    target: String
    value: BigInt
    signature: String
    data: String
    eta: BigInt
}

type TimelockMainFunctionQueueTransaction implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    target: String
    value: BigInt
    signature: String
    data: String
    eta: BigInt
}

type TimelockMainFunctionSetDelay implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    delay: BigInt
}

type TimelockMainFunctionSetPendingAdmin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pendingAdmin: String
}

type ZapEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type ZapFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    stella: String
    router: String
}

type ZapFunctionRemoveToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    i: BigInt
}

type ZapFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type ZapFunctionSetNotLp implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
}

type ZapFunctionSetRoutePairAddress implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    asset: String
    route: String
}

type ZapFunctionSetZapInFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newZapInFees: BigInt
}

type ZapFunctionSetZapOutFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newZapOutFees: BigInt
}

type ZapFunctionSweep implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type ZapFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type ZapFunctionWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
}

type ZapFunctionZapIn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    to: String
}

type ZapFunctionZapInToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    amount: BigInt
    to: String
}

type ZapFunctionZapOut implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    amount: BigInt
}

type CelrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type CelrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type CelrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type CelrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type CelrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type CelrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type CelrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type CelrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type CelrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type CelrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type CelrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type CelrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type CelrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type BcmcRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type BcmcRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type BcmcRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type BcmcRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type BcmcRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type BcmcRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type BcmcRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type BcmcRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type BcmcRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type BcmcRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type BcmcRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type BcmcRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type BcmcRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type BcmcRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type BcmcRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type BcmcRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type BcmcRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type BcmcRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type UsdcRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type UsdcRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type UsdcRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type UsdcRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type UsdcRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type UsdcRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type UsdcRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type UsdcRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type UsdcRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type UsdcRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type UsdcRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type UsdcRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type UsdcRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type UsdcRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type UsdcRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type UsdcRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type UsdcRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type UsdcRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type GlmrRewarderFirstEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type GlmrRewarderFirstEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type GlmrRewarderFirstEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type GlmrRewarderFirstEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type GlmrRewarderFirstEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type GlmrRewarderFirstEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type GlmrRewarderFirstEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type GlmrRewarderFirstFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type GlmrRewarderFirstFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type GlmrRewarderFirstFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type GlmrRewarderFirstFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type GlmrRewarderFirstFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type GlmrRewarderFirstFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type GlmrRewarderFirstFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrRewarderFirstFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type GlmrRewarderFirstFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrRewarderFirstFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type GlmrRewarderFirstFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomGlmrGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomGlmrGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type AtomGlmrGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AtomGlmrGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AtomGlmrGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type AtomGlmrGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomGlmrGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type AtomGlmrGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type AtomGlmrGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomGlmrGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type AtomGlmrGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type AtomGlmrGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type AtomGlmrGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AtomGlmrGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomGlmrGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type AtomGlmrGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomGlmrGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type AtomGlmrGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomUsdcGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomUsdcGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type AtomUsdcGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AtomUsdcGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AtomUsdcGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type AtomUsdcGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomUsdcGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type AtomUsdcGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type AtomUsdcGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomUsdcGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type AtomUsdcGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type AtomUsdcGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type AtomUsdcGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AtomUsdcGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomUsdcGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type AtomUsdcGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomUsdcGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type AtomUsdcGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelerRewarder0EventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelerRewarder0EventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type CelerRewarder0EventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type CelerRewarder0EventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type CelerRewarder0EventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type CelerRewarder0EventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelerRewarder0EventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type CelerRewarder0FunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type CelerRewarder0FunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelerRewarder0FunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type CelerRewarder0FunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type CelerRewarder0FunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type CelerRewarder0FunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type CelerRewarder0FunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelerRewarder0FunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type CelerRewarder0FunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelerRewarder0FunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type CelerRewarder0FunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelerRewarder1EventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelerRewarder1EventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type CelerRewarder1EventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type CelerRewarder1EventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type CelerRewarder1EventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type CelerRewarder1EventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelerRewarder1EventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type CelerRewarder1FunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type CelerRewarder1FunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelerRewarder1FunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type CelerRewarder1FunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type CelerRewarder1FunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type CelerRewarder1FunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type CelerRewarder1FunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelerRewarder1FunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type CelerRewarder1FunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelerRewarder1FunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type CelerRewarder1FunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type GlmrRewarderForUstGlmrEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type GlmrRewarderForUstGlmrEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type GlmrRewarderForUstGlmrEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type GlmrRewarderForUstGlmrEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type GlmrRewarderForUstGlmrEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type GlmrRewarderForUstGlmrEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type GlmrRewarderForUstGlmrEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type GlmrRewarderForUstGlmrFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type GlmrRewarderForUstGlmrFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type GlmrRewarderForUstGlmrFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type GlmrRewarderForUstGlmrFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type GlmrRewarderForUstGlmrFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type GlmrRewarderForUstGlmrFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type GlmrRewarderForUstGlmrFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrRewarderForUstGlmrFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type GlmrRewarderForUstGlmrFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrRewarderForUstGlmrFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type GlmrRewarderForUstGlmrFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomGlmrRewarderNewEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomGlmrRewarderNewEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type AtomGlmrRewarderNewEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AtomGlmrRewarderNewEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AtomGlmrRewarderNewEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type AtomGlmrRewarderNewEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomGlmrRewarderNewEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type AtomGlmrRewarderNewFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type AtomGlmrRewarderNewFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomGlmrRewarderNewFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type AtomGlmrRewarderNewFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type AtomGlmrRewarderNewFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type AtomGlmrRewarderNewFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AtomGlmrRewarderNewFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomGlmrRewarderNewFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type AtomGlmrRewarderNewFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomGlmrRewarderNewFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type AtomGlmrRewarderNewFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomUsdcRewarderNewEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomUsdcRewarderNewEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type AtomUsdcRewarderNewEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AtomUsdcRewarderNewEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AtomUsdcRewarderNewEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type AtomUsdcRewarderNewEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AtomUsdcRewarderNewEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type AtomUsdcRewarderNewFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type AtomUsdcRewarderNewFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AtomUsdcRewarderNewFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type AtomUsdcRewarderNewFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type AtomUsdcRewarderNewFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type AtomUsdcRewarderNewFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AtomUsdcRewarderNewFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomUsdcRewarderNewFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type AtomUsdcRewarderNewFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AtomUsdcRewarderNewFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type AtomUsdcRewarderNewFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type DualEthGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type DualEthGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type DualEthGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type DualEthGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type DualEthGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type DualEthGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type DualEthGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type DualEthGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type DualEthGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type DualEthGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type DualEthGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type DualEthGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type DualEthGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type DualEthGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type DualEthGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type DualEthGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type DualEthGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type DualEthGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelerRewarder0102EventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelerRewarder0102EventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type CelerRewarder0102EventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type CelerRewarder0102EventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type CelerRewarder0102EventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type CelerRewarder0102EventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type CelerRewarder0102EventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type CelerRewarder0102FunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type CelerRewarder0102FunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type CelerRewarder0102FunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type CelerRewarder0102FunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type CelerRewarder0102FunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type CelerRewarder0102FunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type CelerRewarder0102FunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelerRewarder0102FunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type CelerRewarder0102FunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type CelerRewarder0102FunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type CelerRewarder0102FunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XcDotGlmrEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XcDotGlmrEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type XcDotGlmrEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type XcDotGlmrEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type XcDotGlmrEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type XcDotGlmrEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XcDotGlmrEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type XcDotGlmrFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type XcDotGlmrFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XcDotGlmrFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type XcDotGlmrFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type XcDotGlmrFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type XcDotGlmrFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type XcDotGlmrFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XcDotGlmrFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type XcDotGlmrFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XcDotGlmrFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type XcDotGlmrFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type WbtcUsdtContractEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type WbtcUsdtContractEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type WbtcUsdtContractEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type WbtcUsdtContractEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type WbtcUsdtContractEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type WbtcUsdtContractEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type WbtcUsdtContractEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type WbtcUsdtContractFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type WbtcUsdtContractFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type WbtcUsdtContractFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type WbtcUsdtContractFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type WbtcUsdtContractFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type WbtcUsdtContractFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type WbtcUsdtContractFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type WbtcUsdtContractFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type WbtcUsdtContractFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type WbtcUsdtContractFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type WbtcUsdtContractFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaUsdcRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XStellaUsdcRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type XStellaUsdcRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type XStellaUsdcRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type XStellaUsdcRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type XStellaUsdcRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XStellaUsdcRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type XStellaUsdcRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type XStellaUsdcRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaUsdcRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type XStellaUsdcRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type XStellaUsdcRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type XStellaUsdcRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type XStellaUsdcRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaUsdcRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type XStellaUsdcRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaUsdcRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type XStellaUsdcRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XStellaGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type XStellaGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type XStellaGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type XStellaGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type XStellaGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XStellaGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type XStellaGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type XStellaGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type XStellaGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type XStellaGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type XStellaGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type XStellaGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type XStellaGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type XStellaGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaGlmrRewarder2NdEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XStellaGlmrRewarder2NdEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type XStellaGlmrRewarder2NdEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type XStellaGlmrRewarder2NdEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type XStellaGlmrRewarder2NdEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type XStellaGlmrRewarder2NdEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type XStellaGlmrRewarder2NdEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type XStellaGlmrRewarder2NdFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type XStellaGlmrRewarder2NdFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaGlmrRewarder2NdFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type XStellaGlmrRewarder2NdFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type XStellaGlmrRewarder2NdFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type XStellaGlmrRewarder2NdFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type XStellaGlmrRewarder2NdFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaGlmrRewarder2NdFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type XStellaGlmrRewarder2NdFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaGlmrRewarder2NdFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type XStellaGlmrRewarder2NdFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type UstGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type UstGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type UstGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type UstGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type UstGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type UstGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type UstGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type UstGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type UstGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type UstGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type UstGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type UstGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type UstGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type UstGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type UstGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type UstGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type UstGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type UstGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type EthMadGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type EthMadGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type EthMadGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type EthMadGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type EthMadGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type EthMadGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type EthMadGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type EthMadGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type EthMadGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type EthMadGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type EthMadGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type EthMadGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type EthMadGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type EthMadGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type EthMadGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type EthMadGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type EthMadGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type EthMadGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type MadUsdcGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type MadUsdcGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type MadUsdcGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type MadUsdcGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type MadUsdcGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type MadUsdcGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type MadUsdcGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type MadUsdcGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type MadUsdcGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type MadUsdcGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type MadUsdcGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type MadUsdcGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type MadUsdcGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type MadUsdcGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MadUsdcGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type MadUsdcGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MadUsdcGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type MadUsdcGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type MistakeInRewarderRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type MistakeInRewarderRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type MistakeInRewarderRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type MistakeInRewarderRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type MistakeInRewarderRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type MistakeInRewarderRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type MistakeInRewarderRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type MistakeInRewarderRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type MistakeInRewarderRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type MistakeInRewarderRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type MistakeInRewarderRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type MistakeInRewarderRewarderFunctionEmergencyRewardWithdra implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type MistakeInRewarderRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type MistakeInRewarderRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MistakeInRewarderRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type MistakeInRewarderRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MistakeInRewarderRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type MistakeInRewarderRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type MadUsdcGlmrRewarder2EventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type MadUsdcGlmrRewarder2EventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type MadUsdcGlmrRewarder2EventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type MadUsdcGlmrRewarder2EventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type MadUsdcGlmrRewarder2EventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type MadUsdcGlmrRewarder2EventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type MadUsdcGlmrRewarder2EventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type MadUsdcGlmrRewarder2FunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type MadUsdcGlmrRewarder2FunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type MadUsdcGlmrRewarder2FunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type MadUsdcGlmrRewarder2FunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type MadUsdcGlmrRewarder2FunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type MadUsdcGlmrRewarder2FunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type MadUsdcGlmrRewarder2FunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MadUsdcGlmrRewarder2FunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type MadUsdcGlmrRewarder2FunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type MadUsdcGlmrRewarder2FunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type MadUsdcGlmrRewarder2FunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type DotXcGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type DotXcGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type DotXcGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type DotXcGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type DotXcGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type DotXcGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type DotXcGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type DotXcGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type DotXcGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type DotXcGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type DotXcGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type DotXcGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type DotXcGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type DotXcGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type DotXcGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type DotXcGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type DotXcGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type DotXcGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type EthMadGlmrRewarder2EventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type EthMadGlmrRewarder2EventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type EthMadGlmrRewarder2EventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type EthMadGlmrRewarder2EventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type EthMadGlmrRewarder2EventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type EthMadGlmrRewarder2EventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type EthMadGlmrRewarder2EventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type EthMadGlmrRewarder2FunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type EthMadGlmrRewarder2FunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type EthMadGlmrRewarder2FunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type EthMadGlmrRewarder2FunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type EthMadGlmrRewarder2FunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type EthMadGlmrRewarder2FunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type EthMadGlmrRewarder2FunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type EthMadGlmrRewarder2FunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type EthMadGlmrRewarder2FunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type EthMadGlmrRewarder2FunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type EthMadGlmrRewarder2FunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventOwnershipTran implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type SwapFlashLoanDualEthPoolMultiNomadEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SwapFlashLoanDualEthPoolMultiNomadEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventRemoveLiquidi0 implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventRemoveLiquidi1 implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventRemoveLiquidi2 implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type SwapFlashLoanDualEthPoolMultiNomadEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionAddLiquidi implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionFlashLoan0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionRemoveLiqu0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionRemoveLiqu1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionRemoveLiqu2 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionRenounceOw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionSetAdminF implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionSetFlashL implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionSetSwapFe implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionToggleFlas implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionTransferOw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SwapFlashLoanDualEthPoolMultiNomadFunctionWithdrawAd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolNomadEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type Sfl4PoolNomadEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type Sfl4PoolNomadEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type Sfl4PoolNomadEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type Sfl4PoolNomadEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type Sfl4PoolNomadEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type Sfl4PoolNomadEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type Sfl4PoolNomadEventRemoveLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type Sfl4PoolNomadEventRemoveLiquidityImbalance implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type Sfl4PoolNomadEventRemoveLiquidityOne implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type Sfl4PoolNomadEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type Sfl4PoolNomadEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type Sfl4PoolNomadEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type Sfl4PoolNomadFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type Sfl4PoolNomadFunctionFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type Sfl4PoolNomadFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type Sfl4PoolNomadFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolNomadFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type Sfl4PoolNomadFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type Sfl4PoolNomadFunctionRemoveLiquidityImbalance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type Sfl4PoolNomadFunctionRemoveLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type Sfl4PoolNomadFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolNomadFunctionSetAdminFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type Sfl4PoolNomadFunctionSetFlashLoanFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type Sfl4PoolNomadFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type Sfl4PoolNomadFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolNomadFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type Sfl4PoolNomadFunctionToggleFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type Sfl4PoolNomadFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type Sfl4PoolNomadFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolNomadFunctionWithdrawAdminFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrMaiVaultEventAddedFrontEnd implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt!
}

type GlmrMaiVaultEventApproval implements Event @entity @index(fields: ["owner", "approved", "tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    approved: String!
    tokenId: BigInt!
}

type GlmrMaiVaultEventApprovalForAll implements Event @entity @index(fields: ["owner", "operator"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    operator: String!
    approved: Boolean!
}

type GlmrMaiVaultEventBorrowToken implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
}

type GlmrMaiVaultEventBoughtRiskyDebtVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    riskyVault: BigInt!
    newVault: BigInt!
    riskyVaultBuyer: String!
    amountPaidtoBuy: BigInt!
}

type GlmrMaiVaultEventBurnedToken implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt!
}

type GlmrMaiVaultEventCreateVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    creator: String!
}

type GlmrMaiVaultEventDepositCollateral implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
}

type GlmrMaiVaultEventDestroyVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
}

type GlmrMaiVaultEventLiquidateVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    owner: String!
    buyer: String!
    debtRepaid: BigInt!
    collateralLiquidated: BigInt!
    closingFee: BigInt!
}

type GlmrMaiVaultEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type GlmrMaiVaultEventPayBackToken implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
    closingFee: BigInt!
}

type GlmrMaiVaultEventRemovedFrontEnd implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt!
}

type GlmrMaiVaultEventTransfer implements Event @entity @index(fields: ["from", "to", "tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String!
    to: String!
    tokenId: BigInt!
}

type GlmrMaiVaultEventUpdatedAdmin implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdmin: String!
}

type GlmrMaiVaultEventUpdatedClosingFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFee: BigInt!
}

type GlmrMaiVaultEventUpdatedDebtRatio implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    debtRatio: BigInt!
}

type GlmrMaiVaultEventUpdatedEthPriceSource implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    ethPriceSourceAddress: String!
}

type GlmrMaiVaultEventUpdatedFees implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    adminFee: BigInt!
    refFee: BigInt!
}

type GlmrMaiVaultEventUpdatedFrontEnd implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt!
    newFee: BigInt!
}

type GlmrMaiVaultEventUpdatedGainRatio implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    gainRatio: BigInt!
}

type GlmrMaiVaultEventUpdatedInterestRate implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    interestRate: BigInt!
}

type GlmrMaiVaultEventUpdatedMaxDebt implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newMaxDebt: BigInt!
}

type GlmrMaiVaultEventUpdatedMinCollateralRatio implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newMinCollateralRatio: BigInt!
}

type GlmrMaiVaultEventUpdatedMinDebt implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newMinDebt: BigInt!
}

type GlmrMaiVaultEventUpdatedOpeningFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFee: BigInt!
}

type GlmrMaiVaultEventUpdatedOracleName implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oracle: String!
}

type GlmrMaiVaultEventUpdatedRef implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newRef: String!
}

type GlmrMaiVaultEventUpdatedStabilityPool implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String!
}

type GlmrMaiVaultEventUpdatedTokenUri implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    uri: String!
}

type GlmrMaiVaultEventWithdrawCollateral implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
}

type GlmrMaiVaultEventWithdrawInterest implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    earned: BigInt!
}

type GlmrMaiVaultFunctionAddFrontEnd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt
}

type GlmrMaiVaultFunctionApprove implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    to: String
    tokenId: BigInt
}

type GlmrMaiVaultFunctionBorrowToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
    front: BigInt
}

type GlmrMaiVaultFunctionBurn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountToken: BigInt
}

type GlmrMaiVaultFunctionBuyRiskDebtVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
}

type GlmrMaiVaultFunctionChangeEthPriceSource implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    ethPriceSourceAddress: String
}

type GlmrMaiVaultFunctionCreateVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrMaiVaultFunctionDepositCollateral implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
}

type GlmrMaiVaultFunctionDestroyVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
}

type GlmrMaiVaultFunctionGetPaid implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrMaiVaultFunctionLiquidateVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    front: BigInt
}

type GlmrMaiVaultFunctionPayBackToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
    front: BigInt
}

type GlmrMaiVaultFunctionPaybackTokenAll implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    deadline: BigInt
    front: BigInt
}

type GlmrMaiVaultFunctionRemoveFrontEnd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt
}

type GlmrMaiVaultFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type GlmrMaiVaultFunctionSafeTransferFrom0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
}

type GlmrMaiVaultFunctionSafeTransferFrom1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
    data: String
}

type GlmrMaiVaultFunctionSetAdmin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    adm: String
}

type GlmrMaiVaultFunctionSetApprovalForAll implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    operator: String
    approved: Boolean
}

type GlmrMaiVaultFunctionSetClosingFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    closingFee: BigInt
}

type GlmrMaiVaultFunctionSetDebtRatio implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    debtRatio: BigInt
}

type GlmrMaiVaultFunctionSetFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    admin: BigInt
    ref: BigInt
}

type GlmrMaiVaultFunctionSetGainRatio implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    gainRatio: BigInt
}

type GlmrMaiVaultFunctionSetInterestRate implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    iR: BigInt
}

type GlmrMaiVaultFunctionSetMaxDebt implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    maxDebt: BigInt
}

type GlmrMaiVaultFunctionSetMinCollateralRatio implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    minimumCollateralPercentage: BigInt
}

type GlmrMaiVaultFunctionSetMinDebt implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    minDebt: BigInt
}

type GlmrMaiVaultFunctionSetOpeningFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    openingFee: BigInt
}

type GlmrMaiVaultFunctionSetRef implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    ref: String
}

type GlmrMaiVaultFunctionSetStabilityPool implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
}

type GlmrMaiVaultFunctionSetTokenUri implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    uri: String
}

type GlmrMaiVaultFunctionTransferFrom implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
}

type GlmrMaiVaultFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type GlmrMaiVaultFunctionUpdateFrontEnd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt
    cashback: BigInt
}

type GlmrMaiVaultFunctionUpdateOracleName implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oracle: String
}

type GlmrMaiVaultFunctionUpdateVaultDebt implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
}

type GlmrMaiVaultFunctionWithdrawCollateral implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
}

type GlmrMaiVaultFunctionWithdrawInterest implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AcalaGlmrRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AcalaGlmrRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type AcalaGlmrRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AcalaGlmrRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AcalaGlmrRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type AcalaGlmrRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AcalaGlmrRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type AcalaGlmrRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type AcalaGlmrRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AcalaGlmrRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type AcalaGlmrRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type AcalaGlmrRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type AcalaGlmrRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AcalaGlmrRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AcalaGlmrRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type AcalaGlmrRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AcalaGlmrRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type AcalaGlmrRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type RouterV3FunctionAlgebraSwapCallback implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount0Delta: BigInt
    amount1Delta: BigInt
    data: String
}

type RouterV3FunctionExactInput implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type RouterV3FunctionExactInputSingle implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type RouterV3FunctionExactInputSingleSupportingFeeOnTransf implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type RouterV3FunctionExactOutput implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type RouterV3FunctionExactOutputSingle implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type RouterV3FunctionMulticall implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    data: JSON
}

type RouterV3FunctionRefundNativeToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type RouterV3FunctionSelfPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    value: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type RouterV3FunctionSelfPermitAllowed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    nonce: BigInt
    expiry: BigInt
    v: Int
    r: String
    s: String
}

type RouterV3FunctionSelfPermitAllowedIfNecessary implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    nonce: BigInt
    expiry: BigInt
    v: Int
    r: String
    s: String
}

type RouterV3FunctionSelfPermitIfNecessary implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    value: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type RouterV3FunctionSweepToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amountMinimum: BigInt
    recipient: String
}

type RouterV3FunctionSweepTokenWithFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amountMinimum: BigInt
    recipient: String
    feeBips: BigInt
    feeRecipient: String
}

type RouterV3FunctionUnwrapWNativeToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountMinimum: BigInt
    recipient: String
}

type RouterV3FunctionUnwrapWNativeTokenWithFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountMinimum: BigInt
    recipient: String
    feeBips: BigInt
    feeRecipient: String
}

type SflAthUsdc4PoolEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SflAthUsdc4PoolEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type SflAthUsdc4PoolEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type SflAthUsdc4PoolEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type SflAthUsdc4PoolEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type SflAthUsdc4PoolEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SflAthUsdc4PoolEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type SflAthUsdc4PoolEventRemoveLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type SflAthUsdc4PoolEventRemoveLiquidityImbalance implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SflAthUsdc4PoolEventRemoveLiquidityOne implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type SflAthUsdc4PoolEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type SflAthUsdc4PoolEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type SflAthUsdc4PoolEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SflAthUsdc4PoolFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type SflAthUsdc4PoolFunctionFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type SflAthUsdc4PoolFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type SflAthUsdc4PoolFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAthUsdc4PoolFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type SflAthUsdc4PoolFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type SflAthUsdc4PoolFunctionRemoveLiquidityImbalance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type SflAthUsdc4PoolFunctionRemoveLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type SflAthUsdc4PoolFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAthUsdc4PoolFunctionSetAdminFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type SflAthUsdc4PoolFunctionSetFlashLoanFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type SflAthUsdc4PoolFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type SflAthUsdc4PoolFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAthUsdc4PoolFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type SflAthUsdc4PoolFunctionToggleFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type SflAthUsdc4PoolFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type SflAthUsdc4PoolFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAthUsdc4PoolFunctionWithdrawAdminFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AcalaRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AcalaRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type AcalaRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type AcalaRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type AcalaRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type AcalaRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type AcalaRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type AcalaRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type AcalaRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type AcalaRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type AcalaRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type AcalaRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type AcalaRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type AcalaRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AcalaRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type AcalaRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type AcalaRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type AcalaRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type XStellaMaiVaultEventAddedFrontEnd implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt!
}

type XStellaMaiVaultEventApproval implements Event @entity @index(fields: ["owner", "approved", "tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    approved: String!
    tokenId: BigInt!
}

type XStellaMaiVaultEventApprovalForAll implements Event @entity @index(fields: ["owner", "operator"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    operator: String!
    approved: Boolean!
}

type XStellaMaiVaultEventBorrowToken implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
}

type XStellaMaiVaultEventBoughtRiskyDebtVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    riskyVault: BigInt!
    newVault: BigInt!
    riskyVaultBuyer: String!
    amountPaidtoBuy: BigInt!
}

type XStellaMaiVaultEventBurnedToken implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt!
}

type XStellaMaiVaultEventCreateVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    creator: String!
}

type XStellaMaiVaultEventDepositCollateral implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
}

type XStellaMaiVaultEventDestroyVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
}

type XStellaMaiVaultEventLiquidateVault implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    owner: String!
    buyer: String!
    debtRepaid: BigInt!
    collateralLiquidated: BigInt!
    closingFee: BigInt!
}

type XStellaMaiVaultEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type XStellaMaiVaultEventPayBackToken implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
    closingFee: BigInt!
}

type XStellaMaiVaultEventRemovedFrontEnd implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt!
}

type XStellaMaiVaultEventTransfer implements Event @entity @index(fields: ["from", "to", "tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String!
    to: String!
    tokenId: BigInt!
}

type XStellaMaiVaultEventUpdatedAdmin implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdmin: String!
}

type XStellaMaiVaultEventUpdatedClosingFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFee: BigInt!
}

type XStellaMaiVaultEventUpdatedDebtRatio implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    debtRatio: BigInt!
}

type XStellaMaiVaultEventUpdatedEthPriceSource implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    ethPriceSourceAddress: String!
}

type XStellaMaiVaultEventUpdatedFees implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    adminFee: BigInt!
    refFee: BigInt!
}

type XStellaMaiVaultEventUpdatedFrontEnd implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt!
    newFee: BigInt!
}

type XStellaMaiVaultEventUpdatedGainRatio implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    gainRatio: BigInt!
}

type XStellaMaiVaultEventUpdatedInterestRate implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    interestRate: BigInt!
}

type XStellaMaiVaultEventUpdatedMaxDebt implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newMaxDebt: BigInt!
}

type XStellaMaiVaultEventUpdatedMinCollateralRatio implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newMinCollateralRatio: BigInt!
}

type XStellaMaiVaultEventUpdatedMinDebt implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newMinDebt: BigInt!
}

type XStellaMaiVaultEventUpdatedOpeningFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFee: BigInt!
}

type XStellaMaiVaultEventUpdatedOracleName implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oracle: String!
}

type XStellaMaiVaultEventUpdatedRef implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newRef: String!
}

type XStellaMaiVaultEventUpdatedStabilityPool implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String!
}

type XStellaMaiVaultEventUpdatedTokenUri implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    uri: String!
}

type XStellaMaiVaultEventWithdrawCollateral implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt!
    amount: BigInt!
}

type XStellaMaiVaultEventWithdrawInterest implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    earned: BigInt!
}

type XStellaMaiVaultFunctionAddFrontEnd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt
}

type XStellaMaiVaultFunctionApprove implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    to: String
    tokenId: BigInt
}

type XStellaMaiVaultFunctionBorrowToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
    front: BigInt
}

type XStellaMaiVaultFunctionBurn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountToken: BigInt
}

type XStellaMaiVaultFunctionBuyRiskDebtVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
}

type XStellaMaiVaultFunctionChangeEthPriceSource implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    ethPriceSourceAddress: String
}

type XStellaMaiVaultFunctionCreateVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaMaiVaultFunctionDepositCollateral implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
}

type XStellaMaiVaultFunctionDestroyVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
}

type XStellaMaiVaultFunctionGetPaid implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaMaiVaultFunctionLiquidateVault implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    front: BigInt
}

type XStellaMaiVaultFunctionPayBackToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
    front: BigInt
}

type XStellaMaiVaultFunctionPaybackTokenAll implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    deadline: BigInt
    front: BigInt
}

type XStellaMaiVaultFunctionRemoveFrontEnd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt
}

type XStellaMaiVaultFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type XStellaMaiVaultFunctionSafeTransferFrom0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
}

type XStellaMaiVaultFunctionSafeTransferFrom1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
    data: String
}

type XStellaMaiVaultFunctionSetAdmin implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    adm: String
}

type XStellaMaiVaultFunctionSetApprovalForAll implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    operator: String
    approved: Boolean
}

type XStellaMaiVaultFunctionSetClosingFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    closingFee: BigInt
}

type XStellaMaiVaultFunctionSetDebtRatio implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    debtRatio: BigInt
}

type XStellaMaiVaultFunctionSetFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    admin: BigInt
    ref: BigInt
}

type XStellaMaiVaultFunctionSetGainRatio implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    gainRatio: BigInt
}

type XStellaMaiVaultFunctionSetInterestRate implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    iR: BigInt
}

type XStellaMaiVaultFunctionSetMaxDebt implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    maxDebt: BigInt
}

type XStellaMaiVaultFunctionSetMinCollateralRatio implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    minimumCollateralPercentage: BigInt
}

type XStellaMaiVaultFunctionSetMinDebt implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    minDebt: BigInt
}

type XStellaMaiVaultFunctionSetOpeningFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    openingFee: BigInt
}

type XStellaMaiVaultFunctionSetRef implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    ref: String
}

type XStellaMaiVaultFunctionSetStabilityPool implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
}

type XStellaMaiVaultFunctionSetTokenUri implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    uri: String
}

type XStellaMaiVaultFunctionTransferFrom implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
}

type XStellaMaiVaultFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type XStellaMaiVaultFunctionUpdateFrontEnd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    promoter: BigInt
    cashback: BigInt
}

type XStellaMaiVaultFunctionUpdateOracleName implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oracle: String
}

type XStellaMaiVaultFunctionUpdateVaultDebt implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
}

type XStellaMaiVaultFunctionWithdrawCollateral implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    vaultId: BigInt
    amount: BigInt
}

type XStellaMaiVaultFunctionWithdrawInterest implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Mai4BpWhEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type Mai4BpWhEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type Mai4BpWhEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type Mai4BpWhEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type Mai4BpWhEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type Mai4BpWhEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type Mai4BpWhEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type Mai4BpWhEventRemoveLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type Mai4BpWhEventRemoveLiquidityImbalance implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type Mai4BpWhEventRemoveLiquidityOne implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type Mai4BpWhEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type Mai4BpWhEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type Mai4BpWhEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type Mai4BpWhFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type Mai4BpWhFunctionFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type Mai4BpWhFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type Mai4BpWhFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Mai4BpWhFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type Mai4BpWhFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type Mai4BpWhFunctionRemoveLiquidityImbalance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type Mai4BpWhFunctionRemoveLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type Mai4BpWhFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Mai4BpWhFunctionSetAdminFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type Mai4BpWhFunctionSetFlashLoanFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type Mai4BpWhFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type Mai4BpWhFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Mai4BpWhFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type Mai4BpWhFunctionToggleFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type Mai4BpWhFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type Mai4BpWhFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Mai4BpWhFunctionWithdrawAdminFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolWhEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type Sfl4PoolWhEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type Sfl4PoolWhEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type Sfl4PoolWhEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type Sfl4PoolWhEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type Sfl4PoolWhEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type Sfl4PoolWhEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type Sfl4PoolWhEventRemoveLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type Sfl4PoolWhEventRemoveLiquidityImbalance implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type Sfl4PoolWhEventRemoveLiquidityOne implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type Sfl4PoolWhEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type Sfl4PoolWhEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type Sfl4PoolWhEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type Sfl4PoolWhFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type Sfl4PoolWhFunctionFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type Sfl4PoolWhFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type Sfl4PoolWhFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolWhFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type Sfl4PoolWhFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type Sfl4PoolWhFunctionRemoveLiquidityImbalance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type Sfl4PoolWhFunctionRemoveLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type Sfl4PoolWhFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolWhFunctionSetAdminFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type Sfl4PoolWhFunctionSetFlashLoanFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type Sfl4PoolWhFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type Sfl4PoolWhFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolWhFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type Sfl4PoolWhFunctionToggleFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type Sfl4PoolWhFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type Sfl4PoolWhFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type Sfl4PoolWhFunctionWithdrawAdminFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type InterlayRewarderEventAddPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type InterlayRewarderEventAddRewardInfo implements Event @entity @index(fields: ["pid", "phase"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    phase: BigInt!
    endTimestamp: BigInt!
    rewardPerSec: BigInt!
}

type InterlayRewarderEventOnReward implements Event @entity @index(fields: ["user"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    user: String!
    amount: BigInt!
}

type InterlayRewarderEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type InterlayRewarderEventRewardRateUpdated implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldRate: BigInt!
    newRate: BigInt!
}

type InterlayRewarderEventSetPool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    allocPoint: BigInt!
}

type InterlayRewarderEventUpdatePool implements Event @entity @index(fields: ["pid"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt!
    lastRewardTimestamp: BigInt!
    lpSupply: BigInt!
    accTokenPerShare: BigInt!
}

type InterlayRewarderFunctionGetTimeElapsed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: BigInt
    to: BigInt
    endTimestamp: BigInt
}

type InterlayRewarderFunctionUpdatePool0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type InterlayRewarderFunctionAdd implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    allocPoint: BigInt
    startTimestamp: BigInt
}

type InterlayRewarderFunctionAddRewardInfo implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    endTimestamp: BigInt
    rewardPerSec: BigInt
}

type InterlayRewarderFunctionEmergencyRewardWithdraw implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    amount: BigInt
    beneficiary: String
}

type InterlayRewarderFunctionInCaseTokensGetStuck implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amount: BigInt
}

type InterlayRewarderFunctionMassUpdatePools implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type InterlayRewarderFunctionOnStellaReward implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
    user: String
    amount: BigInt
}

type InterlayRewarderFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type InterlayRewarderFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type InterlayRewarderFunctionUpdatePool1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pid: BigInt
}

type SflMai4PoolEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SflMai4PoolEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type SflMai4PoolEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type SflMai4PoolEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type SflMai4PoolEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type SflMai4PoolEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SflMai4PoolEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type SflMai4PoolEventRemoveLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type SflMai4PoolEventRemoveLiquidityImbalance implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SflMai4PoolEventRemoveLiquidityOne implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type SflMai4PoolEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type SflMai4PoolEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type SflMai4PoolEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SflMai4PoolFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type SflMai4PoolFunctionFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type SflMai4PoolFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type SflMai4PoolFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflMai4PoolFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type SflMai4PoolFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type SflMai4PoolFunctionRemoveLiquidityImbalance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type SflMai4PoolFunctionRemoveLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type SflMai4PoolFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflMai4PoolFunctionSetAdminFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type SflMai4PoolFunctionSetFlashLoanFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type SflMai4PoolFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type SflMai4PoolFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflMai4PoolFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type SflMai4PoolFunctionToggleFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type SflMai4PoolFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type SflMai4PoolFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflMai4PoolFunctionWithdrawAdminFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflLpEventApproval implements Event @entity @index(fields: ["owner", "spender"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    spender: String!
    value: BigInt!
}

type SflLpEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type SflLpEventTransfer implements Event @entity @index(fields: ["from", "to"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String!
    to: String!
    value: BigInt!
}

type SflLpFunctionApprove implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    amount: BigInt
}

type SflLpFunctionBurn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
}

type SflLpFunctionBurnFrom implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String
    amount: BigInt
}

type SflLpFunctionDecreaseAllowance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    subtractedValue: BigInt
}

type SflLpFunctionIncreaseAllowance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    addedValue: BigInt
}

type SflLpFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    name0: String
    symbol: String
}

type SflLpFunctionMint implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    recipient: String
    amount: BigInt
}

type SflLpFunctionPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String
    spender: String
    value: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type SflLpFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflLpFunctionTransfer implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    recipient: String
    amount: BigInt
}

type SflLpFunctionTransferFrom implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    sender: String
    recipient: String
    amount: BigInt
}

type SflLpFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type StableRouterFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
    basePool: String
    metaAmounts: JSON
    baseAmounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type StableRouterFunctionConvert implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    fromPool: String
    toPool: String
    amount: BigInt
    minToMint: BigInt
    deadline: BigInt
}

type StableRouterFunctionRemoveBaseLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
    basePool: String
    tokenAmount: BigInt
    i: Int
    minAmount: BigInt
    deadline: BigInt
}

type StableRouterFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
    basePool: String
    amount: BigInt
    minAmountsMeta: JSON
    minAmountsBase: JSON
    deadline: BigInt
}

type StableRouterFunctionSwapFromBase implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
    basePool: String
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type StableRouterFunctionSwapToBase implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pool: String
    basePool: String
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type SflAxlUsdc4PoolEventAddLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SflAxlUsdc4PoolEventFlashLoan implements Event @entity @index(fields: ["receiver"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String!
    tokenIndex: Int!
    amount: BigInt!
    amountFee: BigInt!
    protocolFee: BigInt!
}

type SflAxlUsdc4PoolEventNewAdminFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt!
}

type SflAxlUsdc4PoolEventNewSwapFee implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt!
}

type SflAxlUsdc4PoolEventOwnershipTransferred implements Event @entity @index(fields: ["previousOwner", "newOwner"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    previousOwner: String!
    newOwner: String!
}

type SflAxlUsdc4PoolEventPaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SflAxlUsdc4PoolEventRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    oldA: BigInt!
    newA: BigInt!
    initialTime: BigInt!
    futureTime: BigInt!
}

type SflAxlUsdc4PoolEventRemoveLiquidity implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    lpTokenSupply: BigInt!
}

type SflAxlUsdc4PoolEventRemoveLiquidityImbalance implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    tokenAmounts: JSON!
    fees: JSON!
    invariant: BigInt!
    lpTokenSupply: BigInt!
}

type SflAxlUsdc4PoolEventRemoveLiquidityOne implements Event @entity @index(fields: ["provider"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    provider: String!
    lpTokenAmount: BigInt!
    lpTokenSupply: BigInt!
    boughtId: BigInt!
    tokensBought: BigInt!
}

type SflAxlUsdc4PoolEventStopRampA implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    currentA: BigInt!
    time: BigInt!
}

type SflAxlUsdc4PoolEventTokenSwap implements Event @entity @index(fields: ["buyer"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    buyer: String!
    tokensSold: BigInt!
    tokensBought: BigInt!
    soldId: BigInt!
    boughtId: BigInt!
}

type SflAxlUsdc4PoolEventUnpaused implements Event @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    account: String!
}

type SflAxlUsdc4PoolFunctionAddLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    minToMint: BigInt
    deadline: BigInt
}

type SflAxlUsdc4PoolFunctionFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    receiver: String
    token: String
    amount: BigInt
    params: String
}

type SflAxlUsdc4PoolFunctionInitialize implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    pooledTokens: JSON
    decimals: JSON
    lpTokenName: String
    lpTokenSymbol: String
    a: BigInt
    fee: BigInt
    adminFee: BigInt
    lpTokenTargetAddress: String
}

type SflAxlUsdc4PoolFunctionPause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAxlUsdc4PoolFunctionRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    futureA: BigInt
    futureTime: BigInt
}

type SflAxlUsdc4PoolFunctionRemoveLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount: BigInt
    minAmounts: JSON
    deadline: BigInt
}

type SflAxlUsdc4PoolFunctionRemoveLiquidityImbalance implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amounts: JSON
    maxBurnAmount: BigInt
    deadline: BigInt
}

type SflAxlUsdc4PoolFunctionRemoveLiquidityOneToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenAmount: BigInt
    tokenIndex: Int
    minAmount: BigInt
    deadline: BigInt
}

type SflAxlUsdc4PoolFunctionRenounceOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAxlUsdc4PoolFunctionSetAdminFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newAdminFee: BigInt
}

type SflAxlUsdc4PoolFunctionSetFlashLoanFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newFlashLoanFeeBps: BigInt
    newProtocolFeeShareBps: BigInt
}

type SflAxlUsdc4PoolFunctionSetSwapFee implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newSwapFee: BigInt
}

type SflAxlUsdc4PoolFunctionStopRampA implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAxlUsdc4PoolFunctionSwap implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenIndexFrom: Int
    tokenIndexTo: Int
    dx: BigInt
    minDy: BigInt
    deadline: BigInt
}

type SflAxlUsdc4PoolFunctionToggleFlashLoan implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    enableFlashLoan: Boolean
}

type SflAxlUsdc4PoolFunctionTransferOwnership implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    newOwner: String
}

type SflAxlUsdc4PoolFunctionUnpause implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type SflAxlUsdc4PoolFunctionWithdrawAdminFees implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type PositionManagerEventApproval implements Event @entity @index(fields: ["owner", "approved", "tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    approved: String!
    tokenId: BigInt!
}

type PositionManagerEventApprovalForAll implements Event @entity @index(fields: ["owner", "operator"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    owner: String!
    operator: String!
    approved: Boolean!
}

type PositionManagerEventCollect implements Event @entity @index(fields: ["tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenId: BigInt!
    recipient: String!
    amount0: BigInt!
    amount1: BigInt!
}

type PositionManagerEventDecreaseLiquidity implements Event @entity @index(fields: ["tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenId: BigInt!
    liquidity: BigInt!
    amount0: BigInt!
    amount1: BigInt!
}

type PositionManagerEventIncreaseLiquidity implements Event @entity @index(fields: ["tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenId: BigInt!
    liquidity: BigInt!
    actualLiquidity: BigInt!
    amount0: BigInt!
    amount1: BigInt!
    pool: String!
}

type PositionManagerEventTransfer implements Event @entity @index(fields: ["from", "to", "tokenId"]) {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String!
    to: String!
    tokenId: BigInt!
}

type PositionManagerFunctionAlgebraMintCallback implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amount0Owed: BigInt
    amount1Owed: BigInt
    data: String
}

type PositionManagerFunctionApprove implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    to: String
    tokenId: BigInt
}

type PositionManagerFunctionBaseUri implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type PositionManagerFunctionBurn implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    tokenId: BigInt
}

type PositionManagerFunctionCollect implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type PositionManagerFunctionCreateAndInitializePoolIfNecess implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token0: String
    token1: String
    sqrtPriceX96: BigInt
}

type PositionManagerFunctionDecreaseLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type PositionManagerFunctionIncreaseLiquidity implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type PositionManagerFunctionMint implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    params: JSON
}

type PositionManagerFunctionMulticall implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    data: JSON
}

type PositionManagerFunctionPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    spender: String
    tokenId: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type PositionManagerFunctionRefundNativeToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
}

type PositionManagerFunctionSafeTransferFrom0 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
}

type PositionManagerFunctionSafeTransferFrom1 implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
    data: String
}

type PositionManagerFunctionSelfPermit implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    value: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type PositionManagerFunctionSelfPermitAllowed implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    nonce: BigInt
    expiry: BigInt
    v: Int
    r: String
    s: String
}

type PositionManagerFunctionSelfPermitAllowedIfNecessary implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    nonce: BigInt
    expiry: BigInt
    v: Int
    r: String
    s: String
}

type PositionManagerFunctionSelfPermitIfNecessary implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    value: BigInt
    deadline: BigInt
    v: Int
    r: String
    s: String
}

type PositionManagerFunctionSetApprovalForAll implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    operator: String
    approved: Boolean
}

type PositionManagerFunctionSweepToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    token: String
    amountMinimum: BigInt
    recipient: String
}

type PositionManagerFunctionTransferFrom implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    from: String
    to: String
    tokenId: BigInt
}

type PositionManagerFunctionUnwrapWNativeToken implements Function @entity {
    id: ID!
    blockNumber: Int! @index
    transactionHash: String! @index
    timestamp: DateTime! @index
    contract: String!
    name: String! @index
    amountMinimum: BigInt
    recipient: String
}
